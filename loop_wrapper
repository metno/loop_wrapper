#!/usr/bin/env python
#============================================================
#    loop_wrapper
#    Copyright (C) 2014,2015,2016  Thomas Lavergne
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License along
#    with this program; if not, write to the Free Software Foundation, Inc.,
#    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#============================================================
#
#============================================================
# First version: Thomas Lavergne, met.no/FoU, 13.02.2014
#
# Thomas Lavergne, met.no/FoU, 10.12.2014    :   add --every option
# Thomas Lavergne, met.no/FoU, 27.03.2015    :   add --cpu option
# Thomas Lavergne, met.no/FoU, 09.04.2015    :   add some examples to the help text
# Thomas Lavergne, met.no/FoU, 09.04.2015    :   introduce version numbers
# Thomas Lavergne, met.no/FoU, 09.04.2015    :   add --backwards
# Thomas Lavergne, met.no/FoU, 13.04.2015    :   add -n / --dry-run
# Thomas Lavergne, met.no/FoU, 13.04.2015    :   add shell parameter expansion (switch to v2)
# Thomas Lavergne, met.no/FoU, 13.04.2015    :   add basic filename expantion with {f:}
# Thomas Lavergne, met.no/FoU, 17.04.2015    :   bugfix
# Thomas Lavergne, met.no/FoU, 18.05.2015    :   fix typo in doc
# Thomas Lavergne, met.no/FoU, 18.05.2015    :   Ctrl-C will now interupt PLL loops nicely (kudos to 
#                    http://bryceboe.com/2010/08/26/python-multiprocessing-and-keyboardinterrupt/)
# Thomas Lavergne, met.no/FoU, 18.05.2015    :   Add my contact in the help message
# Thomas Lavergne, met.no/FoU, 18.05.2015    :   Add an MIT license header
# Thomas Lavergne, met.no/FoU, 20.05.2015    :   Re-licensing to GPLv2
# Thomas Lavergne, met.no/FoU, 22.05.2015    :   Implement --every 6H, --every 2m, etc... This breaks --backwards
# Thomas Lavergne, met.no/FoU, 26.05.2015    :   Allow several more formats for the START/STOP dates
# Thomas Lavergne, met.no/FoU, 26.05.2015    :   Clean-up in the error handling (return code, --die-on-error, etc...)
# Thomas Lavergne, met.no/FoU, 28.05.2015    :   Introduce {F:} that will be substitute by basename({f:})
# Thomas Lavergne, met.no/FoU, 28.05.2015    :   API change: now one must enclose shell expansion constructs inside []
# Thomas Lavergne, met.no/FoU, 30.05.2015    :   bugfix (https://github.com/metno/loop_wrapper/issues/4)
# Thomas Lavergne, met.no/FoU, 17.12.2015    :   allow TODAY and YESTERDAY as valid dates (https://github.com/metno/loop_wrapper/issues/6)
# Thomas Lavergne, met.no/FoU, 17.12.2015    :   send email when done
#============================================================
#============================================================

import sys
import os
import argparse
from argparse import RawDescriptionHelpFormatter
import datetime
import subprocess
import glob
from multiprocessing import Pool, cpu_count
from functools import partial
import itertools
from dateutil import rrule

__version__ = '3.1.2'
__author__  = 'Thomas Lavergne'
__license__ = 'GPLv2'

date_fmts = ('%Y','%Y%m','%Y%m%d','%Y%m%d%H','%Y%m%d%H%M','%Y%m%d%H%M%S')
date_fmts_rep = {'Y':4,'m':2,'d':2,'H':2,'M':2,'S':2}
date_fmts_msg = 'Supported formats: TODAY, YESTERDAY, ' + ', '.join([fmt.replace('%','%%') for fmt in date_fmts])

def send_email(to,cwd,full_cmdline,cmd,start,stop):
    """ send a simple email to state that we are done """
    import smtplib
    import socket
    from email.mime.text import MIMEText
    hostname = socket.gethostname()

    me = 'loop_wrapper@nohost.com'
    body = full_cmdline
    body += '\nFrom: {}'.format(cwd,)
    body += '\nHost: {}'.format(hostname,)
    body += '\nBegan: {}'.format(start,)
    body += '\nEnded: {}'.format(stop,)
    body += '\nDuration: {}'.format((stop-start),)
    msg = MIMEText(body)
    msg['Subject'] = '[{}] done with {}'.format(hostname,cmd,)
    msg['From'] = me
    msg['To'] = to
    s = smtplib.SMTP('localhost')
    s.sendmail(me, [to,], msg.as_string())
    s.quit()

def date_str_len(fmt):
    """ Transforms %Y%m into YYYYMM """
    if (len(fmt) % 2) != 0:
        raise ValueError("The date formats should only have even lengths ({} has length {})".format(fmt,len(fmt)))
    new_fmt = ''
    for i in range(len(fmt)/2):
        lettercode = fmt[2*i+1:2*i+2]
        try:
            new_fmt += lettercode * date_fmts_rep[lettercode]
        except KeyError as k:
            raise ValueError("Un-supported letter code for date parsing: {}".format(k,))
    return new_fmt

def date_arg(d):
    """ Decode/parse the START/STOP dates """

    if d == 'TODAY':
        return datetime.datetime.today()
    if d == 'YESTERDAY':
        return datetime.datetime.today() - datetime.timedelta(days=1)

    # basic test
    if (len(d) % 2) != 0:
        raise argparse.ArgumentTypeError("This date format is not supported (odd number of charaters)")

    # Try all formats, returning at first match.
    for fmt in date_fmts:
        # we do not try decoding if the length of the format is not the length of the datestr
        if len(date_str_len(fmt)) != len(d):
            continue
        try:
            r = datetime.datetime.strptime(d,fmt)
            return r
        except Exception as ex:
            if 'unconverted data remains' in ex.__str__():
                pass
            else:
                # this will stop parsing for invalid dates (e.g. 20090229 or 20101501)
                raise argparse.ArgumentTypeError(ex.__str__())

    # Raise exception if no format match
    raise argparse.ArgumentTypeError("Unsupport format for date {}".format(d,))

def every_arg(d):
    """ Decode the argument to --every flag """
    try:
        d = int(d)
        rr = rrule.DAILY
    except:
        if d.endswith('d'):
            rr = rrule.DAILY
        elif d.endswith('H'):
            rr = rrule.HOURLY
        elif d.endswith('M'):
            rr = rrule.MINUTELY
        elif d.endswith('S'):
            rr = rrule.SECONDLY
        elif d.endswith('m'):
            rr = rrule.MONTHLY
        elif d.endswith('Y'):
            rr = rrule.YEARLY
        elif d.endswith('w'):
            rr = rrule.WEEKLY
        else:
            raise argparse.ArgumentTypeError("Unsupport parameter to --every")
        d = int(d[:-1])
    if d <= 0:
        raise argparse.ArgumentTypeError("Value cannot be negative or zero (got {})".format(d,))
    return (d, rr)

def cpu_arg(d):
    """ Decode the argument to --cpu flag """
    try:
        d = int(d)
    except:
        if d == 'all':
            return cpu_count()
        else:
            raise argparse.ArgumentTypeError("Not a valid type (int expected)")
    if d == 0:
        raise argparse.ArgumentTypeError("Value cannot be zero")
    return d

def run_shell(cmd,quiet=True,dry_run=False,ignore_CtrlC=False,die_on_error=True):
    err = 0
    if not quiet:
        dryrun_str = ''
        if dry_run:
            dryrun_str = '(dry-run mode)'
        print "do {} ({})".format(dryrun_str,cmd,)
    if not dry_run:
        try:
            subprocess.check_call(cmd,shell=True)
        except subprocess.CalledProcessError as ex:
            err = 1
            if die_on_error:
                raise Exception(ex.__class__.__name__ + ": " +str(ex))
        except KeyboardInterrupt:
            # ignore or re-raise the Ctrl-C exception
            err = 1
            if ignore_CtrlC:
                pass
            else:
                raise(KeyboardInterrupt)
    return err

def has_shell_parameter_expansion(cmd):
    elems = cmd.split()
    ret = -1
    for ie, e in enumerate(elems):
        if e.startswith('[') and e.endswith(']'):
            if len(e) == 2:
                raise ValueError("Cannot work with empty shell expansion construct")
            if ret != -1:
                raise ValueError("You can only have 1 shell expansion construct '[]'")
            ret = ie
    return ret

def do_shell_parameter_expansion(cmd):
    elems = cmd.split()

    # expand all the elements through globbing
    globs = range(len(elems))
    shell_expansion_success = False
    for ie, e in enumerate(elems):
        if e.startswith('[') and e.endswith(']'):
            e = e[1:-1]
            globs[ie] = sorted(glob.glob(e))
            if len(globs[ie]) == 0:
                # e.g. '-i' or '{f:}',... something that does not glob to an existing path
                globs[ie] = [e,]
            elif (len(globs[ie]) >= 1):
                # every glob that expands to a path (or collection of paths)
                shell_expansion_success = True
            #elif ((len(globs[ie]) == 1) and not os.path.samefile(globs[ie][0],e)):
            #    shell_expansion_success = True
        else:
            globs[ie] = [e,]

    # prepare a list with all the commands
    p = itertools.product(*globs)

    exp_cmd = list([' '.join(t) for t in p])

    return exp_cmd, shell_expansion_success

if __name__ == '__main__':
    """
       loop_wrapper will run the command given as parameter on a range of dates.
    """
    
    # default email-adress to send email when done
    email_to = None
    try:
        email_to = os.environ['USER']+'@met.no'
    except KeyError:
        # can happen in case loop_wrapper is run in crontab
        pass

    # Prepare command-line parameters and help text
    example_cmd = []
    example_txt = []
    example_cmd.append("loop_wrapper 20121201 20121231 ls -l /inpdir/{d:%Y/%m/%d}")
    example_txt.append("Will list content of /inpdir/2012/12/01/, /inpdir/2012/12/02/, ... /inpdir/2012/12/31/")
    example_cmd.append("loop_wrapper --every 5d 20140101 20141231 mkdir -p /tmp/{d:%Y/%j}")
    example_txt.append("Will create sub-directories /tmp/2014/001/, /tmp/2014/006/, ..., /tmp/2014/361/")
    example_cmd.append("loop_wrapper --cpu all 20130101 20130131 do_something -d {d:%Y%m%d} -i <inpdir> -o <outdir>")
    example_txt.append("Will run do_something on all days of January 2013, using all available cores on host")
    example_cmd.append("loop_wrapper 20130101 20130131 'do_something -i [<inpdir>/{d:%Y/%m/%d}/*.nc] -o <outdir>/{d:%Y/%m/%d}/'")
    example_txt.append("Will run do_something for all netcdf files from and to directories structured as YYYY/MM/DD.")
    example_cmd.append("loop_wrapper 20130101 20130103 'nc2hdf [/tmp/{d:%Y/%m/%d}/amsr*.nc] ./{d:%Y/%m}/{F:}.hdf'")
    example_txt.append("Will apply the nc2hdf tool on all amsr*.nc files, and writing a .nc.hdf for each of them, in another location.")
    epilog = "examples:"
    for ex in range(len(example_cmd)):
        epilog += "\n\t{}\n\t\t{}".format(example_cmd[ex],example_txt[ex])
    epilog += "\nnotes:\n"
    epilog += "\to Parallel processing (--cpu) does not generally conserve execution order.\n"
    epilog += "\to Using --backwards with --cpu does not guarantee the execution order either.\n"
    epilog += "\to FROM_DATE is always the earliest date, and TO_DATE the latest one, even with --backwards.\n"
    epilog += "\to When using shell parameter expansion, one should place the command in single quotes ''.\n"
    epilog += "\nquestions, bug reports, and feature requests:\n"
    epilog += "\tthomas.lavergne@met.no\n"
    p = argparse.ArgumentParser("loop_wrapper",epilog=epilog,formatter_class=RawDescriptionHelpFormatter)
    p.add_argument("--email-when-done", help="Send me ({}) an email when done".format(email_to),action='store_true',default=False)
    p.add_argument("--die-on-error", help="Stop looping as soon as one date fails",action='store_true',default=False)
    p.add_argument("--every", help="Loop every n units. Default unit is d:days, but H:hourly, m:monthly, Y:yearly are supported. For example '--every 6H' (6-hourly steps) or '--every 3m' (steps of 3 months)",default=(1,rrule.DAILY),type=every_arg)
    p.add_argument("--backwards", help="Start from TO_DATE and step backwards to FROM_DATE",action='store_true')
    p.add_argument("--quiet", help="Prevent loop_wrapper to pring anything",action='store_true',default=False)
    p.add_argument("--cpu", help="Number of cpus for parallel runs (defaults to 1: serial run). Can be 'all', in which case all available cpus are used. Can also be a negative number, in which case it indicates how many cpus to spare. E.g. --cpu -2 means 'use all cpus but 2'.",default=1,type=cpu_arg)
    p.add_argument("-v","--version",
                   help="print version number and exits",action='version',
                   version="loop_wrapper {}".format(__version__,))
    p.add_argument("-n","--dry-run", help="If set, commands will be printed be NOT executed",action='store_true')
    p.add_argument("FROM_DATE",help="Earliest date in the loop. " + date_fmts_msg,type=date_arg)
    p.add_argument("TO_DATE", help="Latest date in the loop. Same formats as FROM_DATE.",type=date_arg)
    p.add_argument("command", nargs=argparse.REMAINDER,
                   help="Command to run in the loop. Must contain a {d:strftime} construct (e.g. {d:%%Y.%%m.%%d}). Note that {d:} defaults to {d:%%Y%%m%%d}. The command may also contain paths with wildcards, in which case shell parameter expansion will be attempted for each date in the loop. These wildcard constructs must be enclosed in [ ]. May in addition contain constructs using {f:} or {F:} (e.g. <outir>/{F:}.nc) which will be substituted with the filenames (including extension) obtained through shell parameter expansion. {f:} will be substituted by the full filenames including path, while {F:} will be substituted by just the basename.")
    args = p.parse_args()

    if args.backwards:
        sys.exit("Sorry, --backwards was turned off for now")
    
    if len(args.command) == 0:
        sys.exit("Sorry, I did not get what the command was?")

    if args.email_when_done and not args.dry_run and not email_to:
        # asking for an email, but no mail address available
        sys.exit("Sorry, we could not guess an e-mail address for you (USER not set in ENV)")

    CMD = ' '.join(args.command)
    if not args.quiet:
        print "CMD is {}".format(CMD,)

    # Special case if {d:} is used (empty dateformat string):
    CMD = CMD.replace('{d:}','{d:%Y%m%d}')

    # Check the validity of the range
    if args.FROM_DATE > args.TO_DATE:
        sys.exit("FROM_DATE should come *before* TO_DATE (even if --backwards is used).")

    # Check the validity of the CMD: 1) does it require a d= date.
    try:
        CMD.format(d=None,f='{f:}',F='{F:}')
    except ValueError:
        pass # this is ok: we want the CMD to fail if an invalid date is provided
    except Exception as ex:
        sys.exit("It does not seem CMD uses {d:strftime-format}. Tell me how to loop through dates.")

    # Check the validity of the CMD: 2) does it have a {d:} construct
    if not '{d:' in CMD:
        sys.exit("The command MUST hold a {d:strftime} construct!")

    # Check the validity of the CMD: 3) can we format it with d=today
    try:
        CMD.format(d=datetime.date.today(),f='{f:}',F='{F:}')
    except Exception:
        sys.exit("Got exception when using CMD with d=today: {}".format(ex))

    # Check the validity of the CMD: 4) if it has {f:} or {F:} it must have [shell-parameter-expansion]
    try:
        shell_expansion_index = has_shell_parameter_expansion(CMD)
    except ValueError as ex:
        sys.exit("The command has shell expansion construct, but it is wrongly formatted ({})".format(ex,))
    if (('{f:}' in CMD) or ('{F:}' in CMD)) and (shell_expansion_index == -1):
        sys.exit("You cannot have {f:} or {F:} without a shell parameter expansion construct in []")

    # handle the --backwards date looping
    first_date = args.FROM_DATE
    last_date  = args.TO_DATE
    sign = +1
    if args.backwards:
        first_date = args.TO_DATE
        last_date  = args.FROM_DATE
        sign = -1

    # Keep track if all commands went fine. If not we want to return non-zero code.
    # This includes the cases where shell expansion constructs do not find files/paths
    all_cmds_ok = True

    # Prepare the list of all commands. This include looping on the dates, and
    #    perform shell parameter expansion (glob)
    cmds = []
    for loop_date in rrule.rrule(args.every[1], interval=args.every[0], dtstart=first_date, until=last_date):
        try:
            # perform date looping:
            loop_cmd = CMD.format(d=loop_date,f='{f:}',F='{F:}')
            # perform shell parameter expansion
            shell_expansion_index = has_shell_parameter_expansion(loop_cmd)
            if shell_expansion_index == -1:
                # this means the cmd had no [shell-parameter-expansion] constructs: nothing to do.
                loop_cmd = [loop_cmd,]
                cmds.extend(loop_cmd)
            else:
                loop_cmd, expansion_ok = do_shell_parameter_expansion(loop_cmd)
                if (not expansion_ok):
                    # this means the cmd had [shell-parameter-expansion], but that it did not glob to a path
                    msg = "The shell expansion [{}] did not expand to any path!".format((loop_cmd[0].split())[shell_expansion_index])
                    if args.die_on_error:
                        print "ERROR! {}".format(msg,)
                    else:
                        print "WARNING! {}".format(msg,)
                    all_cmds_ok = False
                else:
                    # ok with the parameter expansion...
                    # perform filename substitution ({f:},...)
                    if ('{f:}' in loop_cmd[0]) or ('{F:}' in loop_cmd[0]):
                        for icmd,lcmd in enumerate(loop_cmd):
                            split_cmd = lcmd.split()
                            expansion_filename = split_cmd[shell_expansion_index]
                            lcmd = lcmd.format(f=expansion_filename,F=os.path.basename(expansion_filename))
                            loop_cmd[icmd] = lcmd
                    cmds.extend(loop_cmd)
        except Exception as ex:
            msg = "Got exception with preparing cmd for {}: {}".format(loop_date,ex)
            sys.exit("ERROR {}".format(msg))

    if not all_cmds_ok and args.die_on_error:
        sys.exit("Some commands could not be prepared, stop now!")

    if len(cmds) == 0:
        sys.exit("No command could be prepared, nothing to run!")

    dry_run_msg = ''
    if args.dry_run:
        dry_run_msg  = "*"*60 + "\n"
        dry_run_msg += "\tDRY-RUN MODE! Commands are printed to screen but NOT run\n"
        dry_run_msg += "*"*60 + "\n"
        print dry_run_msg
        if args.email_when_done:
            print "Will NOT send you an email (--dry-run)"

    all_runs_ok = True

    # Create a "partial" command when many keyword arguments are common to all runs.
    #    Note that ignore_CtrlC will be True for PLL processing (the childs will ignore Ctrl-C, but the
    #    master job will capture it (see below)).
    partial_run_shell = partial(run_shell, quiet=args.quiet, dry_run=args.dry_run, 
                                ignore_CtrlC=(args.cpu!=1),die_on_error=args.die_on_error)

    begin_of_run = datetime.datetime.now()
    if args.cpu == 1:
        if not args.quiet:
            print "Serial run {} from {} to {}".format(CMD,args.FROM_DATE,args.TO_DATE)
        results = [0,]*len(cmds,)
        for icmd, cmd in enumerate(cmds):
            try:
                err = partial_run_shell(cmd)
                results[icmd] = err
            except Exception as ex:
                results[icmd] = 1
                msg = "Got exception when running cmd {}: {}".format(cmd,ex)
                if args.die_on_error:
                    print "ERROR {}".format(msg)
                    break
                else:
                    print "WARNING {}".format(msg)
        all_runs_ok = not sum(results)
    else:
        if args.cpu < 0:
            psize = cpu_count() + args.cpu
            if psize <= 0:
                raise ValueError("Cannot use --cpu {} on a host with only {} cpus".format(args.cpu,cpu_count()))
        else:
            psize = args.cpu

        if not args.quiet:
            print "Parallel ({} cpu) run {} from {} to {}".format(psize,CMD,args.FROM_DATE,args.TO_DATE)

        pool = Pool(psize)
        p = pool.map_async(partial_run_shell,cmds)
        try:
            # TODO: the parameter to get() is a time-out. Check this is a big enough number.
            results = p.get(0xFFFF)
            all_runs_ok = not sum(results)
        except KeyboardInterrupt:
            all_runs_ok = False
            pool.terminate()
            pool.close()
            print "Received KeyboardInterrupt (Ctrl-C). Aborting master and all PLL child processes."
        except Exception as ex:
            all_runs_ok = False
            print "Caught an Exception in the pool ({})".format(ex,)
            pool.terminate()
            pool.close()

    if not args.quiet:
        print "Done"
        print dry_run_msg

    end_of_run = datetime.datetime.now()

    if args.email_when_done and not args.dry_run:
        send_email(email_to,os.path.abspath(''),' '.join(sys.argv,),CMD,begin_of_run,end_of_run)

    if all_runs_ok and all_cmds_ok:
        sys.exit(0)
    else:
        sys.exit("Something went wrong!")
